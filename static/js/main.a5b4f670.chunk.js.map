{"version":3,"sources":["App.js","serviceWorker.js","index.js","loading.gif"],"names":["SourceComponent","list","e01","id","title","src","React","lazy","__webpack_require__","e","then","bind","e02","e03","Promise","all","Loading","react_default","a","createElement","className","alt","loading","Welcome","App","state","current","handleSelect","item","target","value","_this","setState","Object","keys","map","key","this","classes","push","concat","Fragment","onChange","renderOptions","join","Suspense","fallback","App_Loading","data","App_Welcome","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","p"],"mappings":"yHASIA,6FANEC,EAAO,CACXC,IAAK,CAAEC,GAAI,MAAOC,MAAO,gCAAiCC,IAAKC,IAAMC,KAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aAChFC,IAAK,CAAET,GAAI,MAAOC,MAAO,eAAgBC,IAAKC,IAAMC,KAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aAC/DE,IAAK,CAAEV,GAAI,MAAOC,MAAO,UAAWC,IAAKC,IAAMC,KAAK,kBAAMO,QAAAC,IAAA,CAAAP,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,cAKtDK,EAAU,WACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,UAAUhB,IAAKiB,MACxBL,EAAAC,EAAAC,cAAA,2BAKAI,EAAU,WACd,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,gBA6DSI,6MApDbC,MAAQ,CACNC,QAAS,QAGXC,aAAe,SAAClB,GACd,IAAMmB,EAAO3B,EAAKQ,EAAEoB,OAAOC,OAC3B9B,EAAkB4B,EAAOA,EAAKvB,IAAML,EACpC+B,EAAKC,SAAS,CAAEN,QAASE,oFAIzB,OAAOK,OAAOC,KAAKjC,GAAMkC,IAAI,SAAAC,GAC3B,OACEnB,EAAAC,EAAAC,cAAA,UAAQiB,IAAKA,EAAKN,MAAOM,GACtBnC,EAAKmC,GAAKhC,0CAMV,IACCsB,EAAYW,KAAKZ,MAAjBC,QACFY,EAAU,CAAC,qBAIjB,OAHGZ,EAASY,EAAQC,KAAR,OAAAC,OAAoBd,EAAQvB,KACnCmC,EAAQC,KAAK,WAGhBtB,EAAAC,EAAAC,cAACF,EAAAC,EAAMuB,SAAP,KACExB,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,cAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQuB,SAAUL,KAAKV,cACrBV,EAAAC,EAAAC,cAAA,UAAQW,MAAM,IAAd,KACCO,KAAKM,mBAIZ1B,EAAAC,EAAAC,cAAA,OAAKC,UAAWkB,EAAQM,KAAK,MAC1BlB,GACCT,EAAAC,EAAAC,cAACF,EAAAC,EAAM2B,SAAP,CAAgBC,SAAU7B,EAAAC,EAAAC,cAAC4B,EAAD,OACxB9B,EAAAC,EAAAC,cAACnB,EAAD,CAAiBgD,KAAMtB,MAGzBA,GAAYT,EAAAC,EAAAC,cAAC8B,EAAD,eA/CNC,aClBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,KAAK,SAAAsD,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiB3D,EAAA4D,EAAuB","file":"static/js/main.a5b4f670.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport loading from './loading.gif'\n\nconst list = {\n  e01: { id: 'e01', title: 'HOC - Higher-Order Components', src: React.lazy(() => import('./examples/e01/index')) },\n  e02: { id: 'e02', title: 'Render Props', src: React.lazy(() => import('./examples/e02/index')) },\n  e03: { id: 'e03', title: 'Context', src: React.lazy(() => import('./examples/e03/index')) },\n}\n\nlet SourceComponent;\n\nconst Loading = () => {\n  return (\n    <div className='app-loading'>\n      <img alt=\"loading\" src={loading} />\n      <div>Loading...</div>\n    </div>\n  )\n}\n\nconst Welcome = () => {\n  return (\n    <div className='app-welcome'>\n      <div className='title'>\n        Learnspace\n      </div>\n    </div>\n  )\n}\n\nclass App extends Component {\n\n  state = {\n    current: null\n  }\n\n  handleSelect = (e) => {\n    const item = list[e.target.value];\n    SourceComponent = item ? item.src : SourceComponent;\n    this.setState({ current: item })\n  }\n\n  renderOptions() {\n    return Object.keys(list).map(key => {\n      return (\n        <option key={key} value={key}>\n          {list[key].title}\n        </option>\n      )\n    })\n  }\n\n  render() {\n    const { current } = this.state;\n    const classes = ['example-container'];\n    if(current) classes.push(`app-${current.id}`)\n    else classes.push('welcome')\n\n    return (\n      <React.Fragment>\n        <header>\n          <div className=\"brand\">\n            Learnspace\n          </div>\n          <div className=\"nav\">\n            <select onChange={this.handleSelect}>\n              <option value=''>-</option>\n              {this.renderOptions()}\n            </select>\n          </div>\n        </header>\n        <div className={classes.join(' ')}>\n          {current && (\n            <React.Suspense fallback={<Loading />}>\n              <SourceComponent data={current} />\n            </React.Suspense>\n          )}\n          {!current && (<Welcome />)}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loading.cedc890b.gif\";"],"sourceRoot":""}