{"version":3,"sources":["App.js","serviceWorker.js","index.js","loading.gif"],"names":["SourceComponent","list","e01","id","title","src","React","lazy","__webpack_require__","e","then","bind","e02","e03","Promise","all","e04","Loading","react_default","a","createElement","className","alt","loading","Welcome","App","state","current","handleSelect","item","target","value","_this","setState","Object","keys","map","key","this","classes","push","concat","Fragment","onChange","renderOptions","join","Suspense","fallback","App_Loading","data","App_Welcome","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","p"],"mappings":"yHAUIA,6FAPEC,EAAO,CACTC,IAAK,CAAEC,GAAI,MAAOC,MAAO,gCAAiCC,IAAKC,IAAMC,KAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aAChFC,IAAK,CAAET,GAAI,MAAOC,MAAO,eAAgBC,IAAKC,IAAMC,KAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aAC/DE,IAAK,CAAEV,GAAI,MAAOC,MAAO,UAAWC,IAAKC,IAAMC,KAAK,kBAAMO,QAAAC,IAAA,CAAAP,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aAC1DK,IAAK,CAAEb,GAAI,MAAOC,MAAO,mBAAoBC,IAAKC,IAAMC,KAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,cAKjEM,EAAU,WACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,UAAUjB,IAAKkB,MACxBL,EAAAC,EAAAC,cAAA,2BAKNI,EAAU,WACZ,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,gBAwDGI,6MAlDXC,MAAQ,CACJC,QAAS,QAGbC,aAAe,SAAAnB,GACX,IAAMoB,EAAO5B,EAAKQ,EAAEqB,OAAOC,OAC3B/B,EAAkB6B,EAAOA,EAAKxB,IAAML,EACpCgC,EAAKC,SAAS,CAAEN,QAASE,oFAIzB,OAAOK,OAAOC,KAAKlC,GAAMmC,IAAI,SAAAC,GACzB,OACInB,EAAAC,EAAAC,cAAA,UAAQiB,IAAKA,EAAKN,MAAOM,GACpBpC,EAAKoC,GAAKjC,0CAMlB,IACGuB,EAAYW,KAAKZ,MAAjBC,QACFY,EAAU,CAAC,qBAIjB,OAHIZ,EAASY,EAAQC,KAAR,OAAAC,OAAoBd,EAAQxB,KACpCoC,EAAQC,KAAK,WAGdtB,EAAAC,EAAAC,cAACF,EAAAC,EAAMuB,SAAP,KACIxB,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,cACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQuB,SAAUL,KAAKV,cACnBV,EAAAC,EAAAC,cAAA,UAAQW,MAAM,IAAd,KACCO,KAAKM,mBAIlB1B,EAAAC,EAAAC,cAAA,OAAKC,UAAWkB,EAAQM,KAAK,MACxBlB,GACGT,EAAAC,EAAAC,cAACF,EAAAC,EAAM2B,SAAP,CAAgBC,SAAU7B,EAAAC,EAAAC,cAAC4B,EAAD,OACtB9B,EAAAC,EAAAC,cAACpB,EAAD,CAAiBiD,KAAMtB,MAG7BA,GAAWT,EAAAC,EAAAC,cAAC8B,EAAD,eA5CfC,aCjBEC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXvCC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SDoHzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMtD,KAAK,SAAAuD,GAC/BA,EAAaC,kCE5HzBC,EAAAC,QAAiB5D,EAAA6D,EAAuB","file":"static/js/main.8bfe0285.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport loading from './loading.gif'\r\n\r\nconst list = {\r\n    e01: { id: 'e01', title: 'HOC - Higher-Order Components', src: React.lazy(() => import('./examples/e01/index')) },\r\n    e02: { id: 'e02', title: 'Render Props', src: React.lazy(() => import('./examples/e02/index')) },\r\n    e03: { id: 'e03', title: 'Context', src: React.lazy(() => import('./examples/e03/index')) },\r\n    e04: { id: 'e04', title: 'Lifting State Up', src: React.lazy(() => import('./examples/e04/index')) },\r\n}\r\n\r\nlet SourceComponent\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div className=\"app-loading\">\r\n            <img alt=\"loading\" src={loading} />\r\n            <div>Loading...</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Welcome = () => {\r\n    return (\r\n        <div className=\"app-welcome\">\r\n            <div className=\"title\">Learnspace</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass App extends Component {\r\n    state = {\r\n        current: null,\r\n    }\r\n\r\n    handleSelect = e => {\r\n        const item = list[e.target.value]\r\n        SourceComponent = item ? item.src : SourceComponent\r\n        this.setState({ current: item })\r\n    }\r\n\r\n    renderOptions() {\r\n        return Object.keys(list).map(key => {\r\n            return (\r\n                <option key={key} value={key}>\r\n                    {list[key].title}\r\n                </option>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { current } = this.state\r\n        const classes = ['example-container']\r\n        if (current) classes.push(`app-${current.id}`)\r\n        else classes.push('welcome')\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <header>\r\n                    <div className=\"brand\">Learnspace</div>\r\n                    <div className=\"nav\">\r\n                        <select onChange={this.handleSelect}>\r\n                            <option value=\"\">-</option>\r\n                            {this.renderOptions()}\r\n                        </select>\r\n                    </div>\r\n                </header>\r\n                <div className={classes.join(' ')}>\r\n                    {current && (\r\n                        <React.Suspense fallback={<Loading />}>\r\n                            <SourceComponent data={current} />\r\n                        </React.Suspense>\r\n                    )}\r\n                    {!current && <Welcome />}\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n)\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n                    )\r\n                })\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n                            )\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.')\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error)\r\n        })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type')\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.')\r\n        })\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister()\r\n        })\r\n    }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './style.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","module.exports = __webpack_public_path__ + \"static/media/loading.cedc890b.gif\";"],"sourceRoot":""}