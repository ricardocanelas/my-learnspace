{"version":3,"sources":["examples/e03/contexts/theme.js","examples/e03/components/Button.js","examples/e03/components/Input.js","examples/e03/index.js"],"names":["themes","light","name","foreground","background","border","input_border","dark","font","Context","React","createContext","theme","toggleTheme","Button","styled","button","_templateObject","props","ButtonComponent","prevProps","prevState","this","_this","react_default","a","createElement","contexts_theme","Consumer","_ref","Object","assign","children","Component","Input","input","Input_templateObject","InputComponent","withTheme","App","setState","state","objectSpread","storeTheme","Provider","value","components_Button","onClick","components_Input","defaultValue"],"mappings":"+JAEaA,EAAS,CAClBC,MAAO,CACHC,KAAM,QACNC,WAAY,UACZC,WAAY,UACZC,OAAQ,UACRC,aAAc,WAElBC,KAAM,CACFL,KAAM,OACNM,KAAM,4BACNL,WAAY,UACZC,WAAY,UACZC,OAAQ,UACRC,aAAc,YAITG,EAAUC,IAAMC,cAAc,CACvCC,MAAOZ,EAAOO,KACdM,YAAa,eAaFJ,oYC/Bf,IAAMK,EAASC,IAAOC,OAAVC,IACI,SAAAC,GAAK,OAAIA,EAAMN,MAAMR,YAAc,QACxC,SAAAc,GAAK,OAAIA,EAAMN,MAAMT,YAAc,QACxB,SAAAe,GAAK,OAAIA,EAAMN,MAAMP,QAAU,SAsCtCc,6LAxBQC,EAAWC,GAC1B,OAAQD,EAAUR,QAAUU,KAAKJ,MAAMN,uCAKlC,IAAAW,EAAAD,KACL,OACIE,EAAAC,EAAAC,cAACC,EAAaC,SAAd,KAEQ,SAAAC,GAAA,IAAGjB,EAAHiB,EAAGjB,MAAH,OACIY,EAAAC,EAAAC,cAACZ,EAADgB,OAAAC,OAAA,GACQR,EAAKL,MADb,CAEIN,MAAOA,IAENW,EAAKL,MAAMc,mBAhBVtB,IAAMuB,qWChBpC,IFqB0BA,EErBpBC,EAAQnB,IAAOoB,MAAVC,IACK,SAAAlB,GAAK,OAAIA,EAAMN,MAAMR,YAAc,eACxC,SAAAc,GAAK,OAAIA,EAAMN,MAAMT,YAAc,QACxB,SAAAe,GAAK,OAAIA,EAAMN,MAAMN,cAAgB,SAYrD+B,mLAEE,OACIb,EAAAC,EAAAC,cAACQ,EAAUZ,KAAKJ,cAHCR,IAAMuB,WAQpBK,GFFWL,EEEDI,EFFe,SAACnB,GACrC,OACIM,EAAAC,EAAAC,cAACjB,EAAQmB,SAAT,KACK,SAAAC,GAAA,IAAGjB,EAAHiB,EAAGjB,MAAH,OACGY,EAAAC,EAAAC,cAACO,EAADH,OAAAC,OAAA,GAAeb,EAAf,CAAsBN,MAAOA,SGvBvC2B,6MAEJ1B,YAAc,WACZU,EAAKiB,SAAS,SAAAC,GAAK,OAAAX,OAAAY,EAAA,EAAAZ,CAAA,GACdW,EADc,CAEjBE,WAAWb,OAAAY,EAAA,EAAAZ,CAAA,GACNW,EAAME,WADD,CAER/B,MAAO6B,EAAME,WAAW/B,QAAUZ,EAAOO,KAAOP,EAAOC,MAAQD,EAAOO,cAK5EkC,MAAQ,CACNE,WAAY,CACV/B,MAAOZ,EAAOC,MACdY,YAAaU,EAAKV,sFAKpB,OACEW,EAAAC,EAAAC,cAACC,EAAaiB,SAAd,CAAuBC,MAAOvB,KAAKmB,MAAME,YACvCnB,EAAAC,EAAAC,cAACC,EAAaC,SAAd,KACG,SAAAC,GAAA,IAAGhB,EAAHgB,EAAGhB,YAAH,OACCW,EAAAC,EAAAC,cAACoB,EAAD,CAAQC,QAASlC,GAAjB,kBAIJW,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAACoB,EAAD,yBACAtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACsB,EAAD,CAAOC,aAAa,0BAjCZhB,aAyCHM","file":"static/js/3.8a764dc3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const themes = {\r\n    light: {\r\n        name: 'light',\r\n        foreground: '#212529',\r\n        background: '#f8f9fa',\r\n        border: '#f8f9fa',\r\n        input_border: '#e0e0e0',\r\n    },\r\n    dark: {\r\n        name: 'dark',\r\n        font: 'font: 400 13.3333px Arial',\r\n        foreground: '#ffffff',\r\n        background: '#343a40',\r\n        border: '#343a40',\r\n        input_border: '#343a40',\r\n    },\r\n}\r\n\r\nexport const Context = React.createContext({\r\n    theme: themes.dark,\r\n    toggleTheme: () => { }\r\n})\r\n\r\nexport const withTheme = (Component) => (props) => {\r\n    return (\r\n        <Context.Consumer>\r\n            {({ theme }) => (\r\n                <Component {...props} theme={theme} />\r\n            )}\r\n        </Context.Consumer>\r\n    )\r\n}\r\n\r\nexport default Context;","import React from 'react'\r\nimport ThemeContext from '../contexts/theme';\r\nimport styled  from 'styled-components'\r\n\r\nconst Button = styled.button`\r\n  background: ${props => props.theme.background || '#ccc'};\r\n  color: ${props => props.theme.foreground || '#000'};\r\n  border: 1px solid ${props => props.theme.border || '#ccc'};\r\n  display: inline-block;\r\n  font-weight: 400;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  vertical-align: middle;\r\n  padding: .375rem .75rem;\r\n  font-size: 1rem;\r\n  line-height: 1.5;\r\n  border-radius: .25rem;\r\n  cursor: pointer;\r\n`;\r\n\r\nclass ButtonComponent extends React.Component {\r\n    componentDidUpdate(prevProps, prevState) {\r\n        return (prevProps.theme !== this.props.theme)\r\n        // Previous ThemeContext value is prevProps.theme\r\n        // New ThemeContext value is this.props.theme\r\n      }\r\n\r\n    render() {\r\n        return (\r\n            <ThemeContext.Consumer>\r\n                {\r\n                    ({ theme }) => (\r\n                        <Button\r\n                            {...this.props}\r\n                            theme={theme}\r\n                        >\r\n                            {this.props.children}\r\n                        </Button>\r\n                    )\r\n                }\r\n            </ThemeContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ButtonComponent","import React from 'react'\r\nimport { withTheme } from '../contexts/theme';\r\nimport styled  from 'styled-components'\r\n\r\nconst Input = styled.input`\r\n  background: ${props => props.theme.background || '#whitesmoke'};\r\n  color: ${props => props.theme.foreground || '#000'};\r\n  border: 1px solid ${props => props.theme.input_border || '#ccc'};\r\n  display: inline-block;\r\n  font-weight: 400;\r\n  text-align: left;\r\n  white-space: nowrap;\r\n  vertical-align: middle;\r\n  padding: .375rem .75rem;\r\n  font-size: 1rem;\r\n  line-height: 1.5;\r\n  border-radius: .25rem;\r\n`;\r\n\r\nclass InputComponent extends React.Component {\r\n    render() {\r\n        return (\r\n            <Input {...this.props} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default withTheme(InputComponent)","import React, { Component } from 'react'\r\n\r\nimport ThemeContext, { themes } from './contexts/theme';\r\nimport Button from './components/Button'\r\nimport Input from './components/Input';\r\n\r\nclass App extends Component {\r\n\r\n  toggleTheme = () => {\r\n    this.setState(state => ({\r\n      ...state,\r\n      storeTheme: {\r\n        ...state.storeTheme,\r\n        theme: state.storeTheme.theme === themes.dark ? themes.light : themes.dark,\r\n      }\r\n    }));\r\n  }\r\n\r\n  state = {\r\n    storeTheme: {\r\n      theme: themes.light,\r\n      toggleTheme: this.toggleTheme,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ThemeContext.Provider value={this.state.storeTheme}>\r\n        <ThemeContext.Consumer>\r\n          {({ toggleTheme }) => (\r\n            <Button onClick={toggleTheme}>Change theme</Button>\r\n          )}\r\n        </ThemeContext.Consumer>\r\n\r\n        <hr />\r\n\r\n        <Button>This is a button</Button>\r\n        <div>\r\n          <label>Name:</label>\r\n          <Input defaultValue='this a input' />\r\n        </div>\r\n\r\n      </ThemeContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App\r\n"],"sourceRoot":""}